"""Initial EFS schema

Revision ID: 60f8ec4c3731
Revises: 
Create Date: 2025-08-06 00:24:34.709606

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '60f8ec4c3731'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('groups',
    sa.Column('gr_code', sa.String(length=10), nullable=False),
    sa.Column('gr_lib', sa.String(length=255), nullable=True),
    sa.Column('gr_desd', sa.Text(), nullable=True),
    sa.PrimaryKeyConstraint('gr_code')
    )
    op.create_table('locations',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('sampling_location_code', sa.String(length=20), nullable=True),
    sa.Column('group_code', sa.String(length=10), nullable=True),
    sa.Column('region_code', sa.String(length=10), nullable=True),
    sa.Column('name', sa.String(length=255), nullable=True),
    sa.Column('city', sa.String(length=100), nullable=True),
    sa.Column('post_code', sa.String(length=10), nullable=True),
    sa.Column('full_address', sa.Text(), nullable=True),
    sa.Column('address1', sa.String(length=255), nullable=True),
    sa.Column('address2', sa.String(length=255), nullable=True),
    sa.Column('latitude', sa.Numeric(precision=10, scale=8), nullable=True),
    sa.Column('longitude', sa.Numeric(precision=11, scale=8), nullable=True),
    sa.Column('give_blood', sa.Boolean(), nullable=True),
    sa.Column('give_plasma', sa.Boolean(), nullable=True),
    sa.Column('give_platelet', sa.Boolean(), nullable=True),
    sa.Column('transport_info', sa.JSON(), nullable=True),
    sa.Column('schedule_info', sa.JSON(), nullable=True),
    sa.Column('contact_info', sa.JSON(), nullable=True),
    sa.Column('urls', sa.JSON(), nullable=True),
    sa.ForeignKeyConstraint(['group_code'], ['groups.gr_code'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_locations_group_code'), 'locations', ['group_code'], unique=False)
    op.create_index(op.f('ix_locations_post_code'), 'locations', ['post_code'], unique=False)
    op.create_index(op.f('ix_locations_sampling_location_code'), 'locations', ['sampling_location_code'], unique=True)
    op.create_table('collections',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('group_code', sa.String(length=10), nullable=True),
    sa.Column('sampling_location_code', sa.String(length=20), nullable=True),
    sa.Column('date', sa.Date(), nullable=True),
    sa.Column('morning_start_time', sa.Time(), nullable=True),
    sa.Column('morning_end_time', sa.Time(), nullable=True),
    sa.Column('afternoon_start_time', sa.Time(), nullable=True),
    sa.Column('afternoon_end_time', sa.Time(), nullable=True),
    sa.Column('nature', sa.String(length=100), nullable=True),
    sa.Column('lp_code', sa.String(length=10), nullable=True),
    sa.Column('is_public', sa.Boolean(), nullable=True),
    sa.Column('is_publishable', sa.Boolean(), nullable=True),
    sa.Column('propose_planning_rdv', sa.Boolean(), nullable=True),
    sa.Column('taux_remplissage', sa.Numeric(precision=5, scale=4), nullable=True),
    sa.Column('nb_places_restantes_st', sa.Integer(), nullable=True),
    sa.Column('nb_places_totales_st', sa.Integer(), nullable=True),
    sa.Column('nb_places_reservees_st', sa.Integer(), nullable=True),
    sa.Column('nb_places_restantes_pla', sa.Integer(), nullable=True),
    sa.Column('nb_places_totales_pla', sa.Integer(), nullable=True),
    sa.Column('nb_places_reservees_pla', sa.Integer(), nullable=True),
    sa.Column('nb_places_restantes_cpa', sa.Integer(), nullable=True),
    sa.Column('nb_places_totales_cpa', sa.Integer(), nullable=True),
    sa.Column('nb_places_reservees_cpa', sa.Integer(), nullable=True),
    sa.Column('url_blood', sa.String(length=255), nullable=True),
    sa.Column('url_plasma', sa.String(length=255), nullable=True),
    sa.Column('url_platelet', sa.String(length=255), nullable=True),
    sa.Column('convocation_label_long', sa.Text(), nullable=True),
    sa.Column('convocation_label_sms', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['group_code'], ['groups.gr_code'], ),
    sa.ForeignKeyConstraint(['sampling_location_code'], ['locations.sampling_location_code'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_collections_date'), 'collections', ['date'], unique=False)
    op.create_index('ix_collections_date_group', 'collections', ['date', 'group_code'], unique=False)
    op.create_index('ix_collections_date_location', 'collections', ['date', 'sampling_location_code'], unique=False)
    op.create_index(op.f('ix_collections_group_code'), 'collections', ['group_code'], unique=False)
    op.create_table('schedule_snapshots',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('url', sa.String(length=255), nullable=True),
    sa.Column('crawled_at', sa.DateTime(), nullable=True),
    sa.Column('collection_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['collection_id'], ['collections.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_schedule_snapshots_crawled_at'), 'schedule_snapshots', ['crawled_at'], unique=False)
    op.create_index(op.f('ix_schedule_snapshots_url'), 'schedule_snapshots', ['url'], unique=False)
    op.create_index('ix_schedule_snapshots_url_time', 'schedule_snapshots', ['url', 'crawled_at'], unique=False)
    op.create_table('schedule_events',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('snapshot_id', sa.Integer(), nullable=True),
    sa.Column('date', sa.Date(), nullable=True),
    sa.Column('event_type', sa.String(length=20), nullable=True),
    sa.Column('total_slots', sa.Integer(), nullable=True),
    sa.Column('schedules', sa.JSON(), nullable=True),
    sa.Column('available_slots', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['snapshot_id'], ['schedule_snapshots.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('snapshot_id', 'date', 'event_type', name='unique_event_per_snapshot')
    )
    op.create_index(op.f('ix_schedule_events_date'), 'schedule_events', ['date'], unique=False)
    op.create_index('ix_schedule_events_date_type', 'schedule_events', ['date', 'event_type'], unique=False)
    op.create_index(op.f('ix_schedule_events_snapshot_id'), 'schedule_events', ['snapshot_id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_schedule_events_snapshot_id'), table_name='schedule_events')
    op.drop_index('ix_schedule_events_date_type', table_name='schedule_events')
    op.drop_index(op.f('ix_schedule_events_date'), table_name='schedule_events')
    op.drop_table('schedule_events')
    op.drop_index('ix_schedule_snapshots_url_time', table_name='schedule_snapshots')
    op.drop_index(op.f('ix_schedule_snapshots_url'), table_name='schedule_snapshots')
    op.drop_index(op.f('ix_schedule_snapshots_crawled_at'), table_name='schedule_snapshots')
    op.drop_table('schedule_snapshots')
    op.drop_index(op.f('ix_collections_group_code'), table_name='collections')
    op.drop_index('ix_collections_date_location', table_name='collections')
    op.drop_index('ix_collections_date_group', table_name='collections')
    op.drop_index(op.f('ix_collections_date'), table_name='collections')
    op.drop_table('collections')
    op.drop_index(op.f('ix_locations_sampling_location_code'), table_name='locations')
    op.drop_index(op.f('ix_locations_post_code'), table_name='locations')
    op.drop_index(op.f('ix_locations_group_code'), table_name='locations')
    op.drop_table('locations')
    op.drop_table('groups')
    # ### end Alembic commands ###
