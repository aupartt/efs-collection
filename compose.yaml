# =============================================================================
# Docker Compose Configuration for Collectes EFS
# =============================================================================

# =============================================================================
# Services
# =============================================================================

services:
  # ---------------------------------------------------------------------------
  # Infrastructure Services
  # ---------------------------------------------------------------------------

  grafana:
    image: grafana/grafana-enterprise:12.1.1
    ports:
      - 3000:3000
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - POSTGRES_HOST=${POSTGRES_HOST:-postgres}
      - POSTGRES_PORT=${POSTGRES_PORT:-5432}
      - POSTGRES_DB=${POSTGRES_DB:-collecte}
      - POSTGRES_USER=${POSTGRES_GRAFANA_USER}
      - POSTGRES_PASSWORD=${POSTGRES_GRAFANA_PASSWORD}
    volumes:
      - ./conf/grafana/dashboards:/etc/grafana/dashboards
      - ./conf/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
      - ./conf/grafana/provisioning/dashboards/${ENVIRONMENT:-dev}-dashboards.yaml:/etc/grafana/provisioning/dashboards/dashboards.yaml
      - grafana-storage:/var/lib/grafana
    networks:
      - app_network

  loki:
    image: grafana/loki:latest
    ports:
      - "3100:3100"
    volumes:
      - loki-storage:/loki
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    restart: unless-stopped
    networks:
      - app_network

  # ---------------------------------------------------------------------------
  # Data Collection Services
  # ---------------------------------------------------------------------------

  cli:
    build: 
      context: .
      dockerfile: ./collecte-info/Dockerfile
    image: collecte-info:latest
    environment:
      ENVIRONMENT: ${ENVIRONMENT:-dev}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST: ${POSTGRES_HOST:-postgres}
      POSTGRES_PORT: ${POSTGRES_PORT:-5432}
      POSTGRES_DB: ${POSTGRES_DB}
      LOKI_URL: http://${LOKI_HOST}:3100
    depends_on:
      postgres:
        condition: service_healthy
      loki:
        condition: service_healthy
    volumes:
      - ./data/:/app/data/ # to help passing files for import
    networks:
      - app_network

  alembic:
    image: collecte-info:latest
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST: ${POSTGRES_HOST:-postgres}
      POSTGRES_PORT: ${POSTGRES_PORT:-5432}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_GRAFANA_USER: ${POSTGRES_GRAFANA_USER}
      POSTGRES_GRAFANA_PASSWORD: ${POSTGRES_GRAFANA_PASSWORD}
    entrypoint: ["python", "-u", "-m"]
    command: alembic upgrade head
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./collector/alembic.ini:/app/alembic.ini
      - ./collector/alembic:/app/alembic
    networks:
      - app_network

  # ---------------------------------------------------------------------------
  # Database Services
  # ---------------------------------------------------------------------------
  
  postgres:
    image: postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    restart: always
    volumes:
      - efs_postgres:/var/lib/postgresql/data
    ports:
      - 5432:5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app_network

  adminer:
    image: adminer
    ports:
      - 8080:8080
    restart: always
    depends_on:
      - postgres
    networks:
      - app_network

# =============================================================================
# Volumes & Networks
# =============================================================================

volumes:
  efs_postgres:
    driver: local
  grafana-storage:
  loki-storage:
  # rabbitmq_data:
  #   driver: local


networks:
  app_network:
