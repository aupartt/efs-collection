# =============================================================================
# Docker Compose Configuration for Collectes EFS
# =============================================================================

# Shared configuration templates
x-common-environment: &common-environment
  RABBITMQ_USER: guest
  RABBITMQ_PASSWORD: guest
  RABBITMQ_PORT: 5672
  RABBITMQ_HOST: rabbitmq

x-common-volumes: &common-volumes
  - ./collecte-info/data:/app/data

x-get-service-base: &get-service-base
  build: 
    context: ./collecte-info
    args:
      API_CARTO_CLIENT_IMAGE: ${COMPOSE_PROJECT_NAME:-collectes-efs}_api-carto-client
  depends_on:
    - api-carto-client
  volumes: *common-volumes
  environment: *common-environment

# =============================================================================
# Services
# =============================================================================

services:
  # ---------------------------------------------------------------------------
  # Infrastructure Services
  # ---------------------------------------------------------------------------
  
  rabbitmq:
    image: rabbitmq:4-management
    ports:
      - "5672:5672"   # AMQP port
      - "15672:15672" # Management UI
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    restart: unless-stopped
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - crawler_network

  # ---------------------------------------------------------------------------
  # Application Services
  # ---------------------------------------------------------------------------
  
  crawler:
    build: ./crawler/
    command: main.py --headless --keep_alive
    depends_on:
      - rabbitmq
    environment: *common-environment
    restart: unless-stopped
    networks:
      - crawler_network

  api-carto-client:
    build: ./api-carto-client

  # ---------------------------------------------------------------------------
  # Data Collection Services
  # ---------------------------------------------------------------------------
  
  consumer:
    <<: *get-service-base
    command: get_schedules.py --listen
    depends_on:
      - api-carto-client
      - rabbitmq
    restart: unless-stopped
    networks:
      - crawler_network

  get-collectes:
    <<: *get-service-base
    command: get_collectes.py

  get-lieux:
    <<: *get-service-base
    command: get_lieux_collecte.py --force

  get-schedules:
    <<: *get-service-base
    command: get_schedules.py
    depends_on:
      - rabbitmq

  # ---------------------------------------------------------------------------
  # Scheduler Service
  # ---------------------------------------------------------------------------

  scheduler:
    image: docker:27-cli
    environment:
      - COMPOSE_PROJECT_NAME=${COMPOSE_PROJECT_NAME:-collectes-efs}
    command: >
      sh -c "
        echo '# Collectes EFS Scheduler' > /tmp/crontab &&
        echo '# Run get-lieux every week (Sunday at 2 AM)' >> /tmp/crontab &&
        echo '0 2 * * 0 docker compose -f /compose/compose.yaml run --rm get-lieux' >> /tmp/crontab &&
        echo '# Run get-collectes every day at 3 AM' >> /tmp/crontab &&
        echo '0 3 * * * docker compose -f /compose/compose.yaml run --rm get-collectes' >> /tmp/crontab &&
        echo '# Run get-schedules twice a day (6 AM and 6 PM)' >> /tmp/crontab &&
        echo '0 6,18 * * * docker compose -f /compose/compose.yaml run --rm get-schedules' >> /tmp/crontab &&
        crond -f -d 8 -c /tmp
      "
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - .:/compose:ro
    restart: unless-stopped
    depends_on:
      - api-carto-client

# =============================================================================
# Volumes & Networks
# =============================================================================

volumes:
  rabbitmq_data:
    driver: local

networks:
  crawler_network:
    driver: bridge